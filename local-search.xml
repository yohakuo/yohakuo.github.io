<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/03/23/hello-world/"/>
    <url>/2024/03/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>终于!</p><p>github action成功部署了！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>静态博客搭建初级指南1.0</title>
    <link href="/2024/03/23/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%971.0/"/>
    <url>/2024/03/23/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%971.0/</url>
    
    <content type="html"><![CDATA[<h3 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h3><ul><li><p>Netlify <br>  一个静态网页生成器，可以快速地构建和发布个人或团队的网站</p></li><li><p>hexo<br>  Hexo 是一个快速、简洁且高效的静态博客框架，它基于 Node.js 运行，可以将我们撰写的 Markdown 文档解析渲染成静态的 HTML 网页</p></li><li><p><strong>GitHub Pages</strong><br> GitHub Pages 是由 GitHub 官方提供的一种免费的静态站点托管服务，让我们可以在 GitHub 仓库里托管和发布自己的静态网站页面</p></li><li><p><strong>Hexo + GitHub 文章发布原理</strong><br>  在本地撰写 Markdown 格式文章后，通过 Hexo 解析文档，渲染生成具有主题样式的 HTML 静态网页，再推送到 GitHub 上完成博文的发布。</p></li><li><p>Ruby<br>  一种面向对象、指令式、函数式、动态的通用编程语言</p></li><li><p>Gem<br>  <em>Gem</em> 是 <em>Ruby</em> 中的包，其中包含包信息，以及用于安装的文件</p></li><li><p>Gemfile<br>  一种描述 Ruby 程序的 gem 依赖关系的格式</p></li><li><p>最后采用了 hexo+github pages 的方案</p></li></ul><h3 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h3><blockquote><p>[!note]  熟悉了基本流程，但是觉得生成部署有点麻烦，后面发现有 github action 可以自动部署(2.0)，折腾了两天，暂时没问题了</p></blockquote><h4 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h4><ul><li><a href="https://techniquenotes.github.io/2024/02/20/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%B8%80%EF%BC%89/">Hexo 博客搭建教程</a></li><li><a href="https://techniquenotes.github.io/2024/02/20/Hexo/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89/"> Hexo 博客搭建教程（二）</a></li></ul><h4 id="本地配置"><a href="#本地配置" class="headerlink" title="本地配置"></a>本地配置</h4><ul><li><p>安装hexo</p><ul><li>创建一个文件夹 MyBlog，用来存放自己的博客文件，然后 cd 到这个文件夹下（或者在这个文件夹下直接右键 git bash 打开）。</li><li>定位到该目录下，输入 <code>npm install -g hexo-cli </code>安装 Hexo。可能会有几个报错，无视它就行。</li><li>安装完 <code>hexo -v</code> 验证安装成功没</li></ul></li><li><p>初始化</p><ul><li>在主题根目录 <code>hexo init</code><ul><li>初始化失败注意根目录的位置（在三层？）</li></ul></li><li>安装必备组件 <code>npm install</code><br>   这时指定目录会有几个文件夹</li></ul></li><li><p>预览</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo g (hexo <span class="hljs-keyword">generate</span>)<br>hexo server(或者简写:hexo s）)<br></code></pre></td></tr></table></figure></li></ul><h4 id="连接-github-到本地"><a href="#连接-github-到本地" class="headerlink" title="连接 github 到本地"></a>连接 github 到本地</h4><ul><li><p>在 MyBlog 中右键打开 git bash，第一次使用 git 后需要将用户名和邮箱进行初始化 </p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> <span class="hljs-string">&quot;yohakuo&quot;</span><br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;2394791478@qq.com&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>检查</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">git config <span class="hljs-keyword">user</span>.name<br>git config <span class="hljs-keyword">user</span>.email<br></code></pre></td></tr></table></figure></li><li><p>ssh<br> ssh，简单来讲，就是一个秘钥，其中，id_rsa 是你这台电脑的私人秘钥，不能给别人看的，id_rsa. pub 是公共秘钥，可以随便给别人看。把这个公钥放在 GitHub 上，这样当你链接 GitHub 自己的账户时，它就会根据公钥匹配你的私钥，当能够相互匹配时，才能够顺利的通过 git 上传你的文件到 GitHub 上。</p></li><li><p>创建 SSH</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;2394791478@qq.com&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>检验是否创建成功</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com<br></code></pre></td></tr></table></figure></li></ul><h4 id="将-hexo-部署到-github"><a href="#将-hexo-部署到-github" class="headerlink" title="将 hexo 部署到 github"></a>将 hexo 部署到 github</h4><p>这一步，我们就可以将 hexo 和 GitHub 关联起来，也就是将 hexo 生成的文章部署到 GitHub 上，打开博客根目录下的_config. yml 文件，这是博客的配置文件，在这里你可以修改与博客配置相关的各种信息。修改最后一行的配置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"># Deployment <br>## Docs: https:<span class="hljs-comment">//hexo.io/docs/one-command-deployment </span><br>deploy:<br>  type: <span class="hljs-string">&#x27;git&#x27;</span><br>  repository: https:<span class="hljs-comment">//github.com/yohakuo/yohakuo.github.io.git</span><br>  branch: main<br></code></pre></td></tr></table></figure><ul><li><p>注意空格</p></li><li><p>repository 修改为你自己的 github 项目地址即可就是部署时，告诉工具，将生成网页通过 git 方式上传到你对应的链接仓库中。</p></li><li><p>先安装部署的命令</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>部署</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean <span class="hljs-comment">//缩写成 hexo cl</span><br>hexo <span class="hljs-keyword">generate</span> <span class="hljs-comment">// 缩写 hexo g</span><br>hexo deploy <span class="hljs-comment">// hexo deploy</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="写文章、发布"><a href="#写文章、发布" class="headerlink" title="写文章、发布"></a>写文章、发布</h4><ul><li><p>先安装拓展</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">npm</span> i hexo-deployer-git<br></code></pre></td></tr></table></figure></li><li><p>新建博客</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">hexo <span class="hljs-keyword">new</span> <span class="hljs-type">post</span> <span class="hljs-string">&quot;name&quot;</span><br></code></pre></td></tr></table></figure></li><li><p>然后在 <code>source\ _posts </code> 目录可以看到. md 文件</p></li><li><p>实时预览和发布<br>  编写完 markdown 文件后，在根目录用 <code>hexo g</code> 生成静态网页，<code>hexo s</code> 本地预览<br>  如果没有问题可以 <code>hexo d</code> 上次到github</p></li></ul><h4 id="本地预览"><a href="#本地预览" class="headerlink" title="本地预览"></a>本地预览</h4><ul><li>本地预览      <a href="http://localhost:4000/404.html">http://localhost:4000/404.html</a></li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="git-clone-失败"><a href="#git-clone-失败" class="headerlink" title="git clone 失败"></a>git clone 失败</h4><ul><li>取消 http 代理<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>. proxy<br></code></pre></td></tr></table></figure></li><li>取消 https 代理 <figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">git config</span> <span class="hljs-literal">--</span><span class="hljs-comment">global</span> <span class="hljs-literal">--</span><span class="hljs-comment">unset https</span><span class="hljs-string">.</span> <span class="hljs-comment">proxy</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="error-key-does-not-contain-variable-name-user"><a href="#error-key-does-not-contain-variable-name-user" class="headerlink" title="error: key does not contain variable name: user."></a>error: key does not contain variable name: user.</h4><ul><li>转为手动输入</li></ul><h4 id="css-渲染失败"><a href="#css-渲染失败" class="headerlink" title="css 渲染失败"></a>css 渲染失败</h4><ul><li>文件名内有非法字符 # ，换目录，目录最好是 <code>x:/xx/xx</code> <ul><li>新建目录 <code>x:/x</code> 也遇到了问题</li></ul></li><li><a href="https://github.com/MOxFIVE/hexo-theme-yelee/issues/245">ERROR Asset render failed: css&#x2F;style.css · Issue</a></li></ul><h4 id="打开网页是空白，警告：No-layout"><a href="#打开网页是空白，警告：No-layout" class="headerlink" title="打开网页是空白，警告：No layout"></a>打开网页是空白，警告：No layout</h4><ul><li>可能是主题配置的问题</li><li>存在两个主题的<code>.yml</code> 文件</li></ul><h4 id="hexo-s-访问失败，-hexo-d-报错"><a href="#hexo-s-访问失败，-hexo-d-报错" class="headerlink" title="hexo s 访问失败， hexo d 报错"></a>hexo s 访问失败， hexo d 报错</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">localhost 已拒绝连接<br><br>fatal: <br>unable <span class="hljs-keyword">to</span> access  https://github.<span class="hljs-keyword">com</span>/yohakuo/yohakuo.github.io.git/<br>Could not <span class="hljs-built_in">resolve</span> host: github. <span class="hljs-keyword">com</span><br></code></pre></td></tr></table></figure><ul><li>更改 DNS 为 Gogle 后还是无法本地预览，但发布成功了</li></ul>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>blog</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态博客搭建初级指南2.0</title>
    <link href="/2024/03/23/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%972.0/"/>
    <url>/2024/03/23/%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%972.0/</url>
    
    <content type="html"><![CDATA[<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://hexo.io/zh-cn/docs/github-pages">在 GitHub Pages 上部署 Hexo | Hexo</a></li><li><a href="https://oreo.life/blog/2021-09-01-deploy-hexo-with-github-actions-1/">轮子再造 | 使用 GitHub Actions 自动部署 Hexo 博客 - 上篇 | On my way to Oodi (oreo.life)</a></li></ul><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ul><li><p>切换分支</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">git checkout <span class="hljs-selector-tag">main</span><br></code></pre></td></tr></table></figure></li><li><p>保存更改并推送到 GitHub：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">git <span class="hljs-built_in">add</span> .  <br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;main workflow configure&quot;</span>  <br></code></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> commit -m <span class="hljs-string">&quot;Vault backup&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> -u <span class="hljs-built_in">origin</span> main<br></code></pre></td></tr></table></figure></li><li><p>暂存更改（将它们暂存起来，然后在合并分支后再恢复）</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash</span><br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">git stash <span class="hljs-built_in">apply</span><br></code></pre></td></tr></table></figure></li><li><p>删除这些更改</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git stash drop</span><br></code></pre></td></tr></table></figure></li><li><p>删除远程分支</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima">git <span class="hljs-built_in">push</span> <span class="hljs-built_in">origin</span> --<span class="hljs-built_in">delete</span><br></code></pre></td></tr></table></figure></li><li><p>关联分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git branch -u origin/main<br></code></pre></td></tr></table></figure></li><li><p>文件和文件夹的删除</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git rm <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git rm -r <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li>文章配置 <a href="https://hexo.io/zh-cn/docs/front-matter">Front-matter | Hexo</a></li><li>主题配置 <a href="https://hexo.fluid-dev.com/docs/guide/#%E6%9C%AC%E5%9C%B0%E6%90%9C%E7%B4%A2">配置指南 | Hexo Fluid 用户手册 (fluid-dev.com)</a></li></ul><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h4 id="You-have-unmerged-paths"><a href="#You-have-unmerged-paths" class="headerlink" title="You have unmerged paths."></a>You have unmerged paths.</h4><ul><li>查看下暂存区修改后的文件状态。<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git status</span><br></code></pre></td></tr></table></figure></li><li>eg<ul><li>![[Pasted image 20240320103632.png|520]]</li><li>来到标红的文件进行修改，再次 push <code>**MERGING**</code> 就没有了</li></ul></li></ul><h4 id="git-push-u-origin-–-fatal-unable-to-access"><a href="#git-push-u-origin-–-fatal-unable-to-access" class="headerlink" title="git push -u origin –&gt; fatal: unable to access"></a>git push -u origin –&gt; fatal: unable to access</h4><ul><li>远程仓库和本地不一致，且远程有的文件本地没有</li><li>查询并取消代理<figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs tcl">git config --<span class="hljs-keyword">global</span> <span class="hljs-keyword">http</span>.proxy<br> <br>git config --<span class="hljs-keyword">global</span> --<span class="hljs-keyword">unset</span> <span class="hljs-keyword">http</span>.proxy<br></code></pre></td></tr></table></figure></li><li>修改dns<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">git pull origin <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><h4 id="页面空白"><a href="#页面空白" class="headerlink" title="页面空白"></a>页面空白</h4>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>blog</tag>
      
      <tag>github</tag>
      
      <tag>github action</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
